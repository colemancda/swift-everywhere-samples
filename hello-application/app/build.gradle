apply plugin: 'com.android.application'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.home.hello_ndk"
        minSdkVersion 24
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs 'build/swift'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

// https://stackoverflow.com/a/36730534/1418981
// https://stackoverflow.com/q/50448281/1418981
def getDeviceAbi() {
    return "adb shell getprop ro.product.cpu.abi".execute().text.trim()
}

// See: https://docs.gradle.org/current/dsl/org.gradle.api.tasks.Exec.html
task spm(type:Exec) {
    project.logger.lifecycle("Building Swift sources for: ${getDeviceAbi()}")
    workingDir "$rootDir"
    executable = '/usr/bin/env'
    args = ["ruby", "-r", "./Builder.rb", "-e", "Builder.perform('${getDeviceAbi()}')"]
}

afterEvaluate {
    if (project.hasProperty("assembleRelease")) {
        assembleRelease.dependsOn spm
    }
    if (project.hasProperty("assembleDebug")) {
        assembleDebug.dependsOn spm
    }
}